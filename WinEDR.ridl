// ************************************************************************ //
// WARNING
// -------
// This file is generated by the Type Library importer or Type Libary Editor.
// Barring syntax errors, the Editor will parse modifications made to the file.
// However, when applying changes via the Editor this file will be regenerated
// and comments or formatting changes will be lost.
// ************************************************************************ //
// File generated on 24/05/2023 14:52:20 (- $Rev: 12980 $, 10077359).

[
  uuid(1D3AA672-406C-4763-9645-84DE3DF7F1CA),
  version(1.0),
  helpstring("WinEDR Library")

]
library WinEDR
{

  importlib("stdole2.tlb");

  interface IAUTO;
  coclass AUTO;


  [
    uuid(8ECE1EA2-3347-42A5-8119-3DF9B5448D55),
    version(1.0),
    helpstring("Dispatch interface for AUTO Object"),
    dual,
    oleautomation
  ]
  interface IAUTO: IDispatch
  {
    [id(0x000000C9)]
    HRESULT _stdcall NewFile([in] VARIANT FileName);
    [id(0x000000CA)]
    HRESULT _stdcall CloseFile(void);
    [id(0x000000CB)]
    HRESULT _stdcall OpenFile([in] VARIANT FileName);
    [id(0x000000CC)]
    HRESULT _stdcall StartRecording(void);
    [id(0x000000CD)]
    HRESULT _stdcall StopRecording(void);
    [propget, id(0x000000CE)]
    HRESULT _stdcall RecordDuration([out, retval] VARIANT* Value);
    [propput, id(0x000000CE)]
    HRESULT _stdcall RecordDuration([in] VARIANT Value);
    [propget, id(0x000000CF)]
    HRESULT _stdcall TriggerMode([out, retval] VARIANT* Value);
    [propput, id(0x000000CF)]
    HRESULT _stdcall TriggerMode([in] VARIANT Value);
    [propget, id(0x000000D0)]
    HRESULT _stdcall StimulusProtocol([out, retval] VARIANT* Value);
    [propput, id(0x000000D0)]
    HRESULT _stdcall StimulusProtocol([in] VARIANT Value);
    [id(0x000000D1)]
    HRESULT _stdcall StartStimulus(void);
    [id(0x000000D2)]
    HRESULT _stdcall StopStimulus(void);
    [propget, id(0x000000D3)]
    HRESULT _stdcall HoldingVoltage([out, retval] VARIANT* Value);
    [propput, id(0x000000D3)]
    HRESULT _stdcall HoldingVoltage([in] VARIANT Value);
    [propget, id(0x000000D4)]
    HRESULT _stdcall DACChannel([out, retval] VARIANT* Value);
    [propput, id(0x000000D4)]
    HRESULT _stdcall DACChannel([in] VARIANT Value);
    [propget, id(0x000000D5)]
    HRESULT _stdcall NumTriggerSweeps([out, retval] VARIANT* Value);
    [propput, id(0x000000D5)]
    HRESULT _stdcall NumTriggerSweeps([in] VARIANT Value);
    [id(0x000000D6)]
    HRESULT _stdcall StartSealTest(void);
    [id(0x000000D7)]
    HRESULT _stdcall StopSealTest(void);
    [propget, id(0x000000D8)]
    HRESULT _stdcall Cm([out, retval] VARIANT* Value);
    [propput, id(0x000000D8)]
    HRESULT _stdcall Cm([in] VARIANT Value);
    [propget, id(0x000000D9)]
    HRESULT _stdcall Gm([out, retval] VARIANT* Value);
    [propput, id(0x000000D9)]
    HRESULT _stdcall Gm([in] VARIANT Value);
    [propget, id(0x000000DA)]
    HRESULT _stdcall Ga([out, retval] VARIANT* Value);
    [propput, id(0x000000DA)]
    HRESULT _stdcall Ga([in] VARIANT Value);
    [propget, id(0x000000DB)]
    HRESULT _stdcall RSeal([out, retval] VARIANT* Value);
    [propput, id(0x000000DB)]
    HRESULT _stdcall RSeal([in] VARIANT Value);
    [propget, id(0x000000DC)]
    HRESULT _stdcall SealTestPulseAmplitude([out, retval] VARIANT* Value);
    [propput, id(0x000000DC)]
    HRESULT _stdcall SealTestPulseAmplitude([in] VARIANT Value);
    [propget, id(0x000000DD)]
    HRESULT _stdcall SealTestPulseDuration([out, retval] VARIANT* Value);
    [propput, id(0x000000DD)]
    HRESULT _stdcall SealTestPulseDuration([in] VARIANT Value);
    [propget, id(0x000000DE)]
    HRESULT _stdcall Status([out, retval] VARIANT* Value);
    [propput, id(0x000000DE)]
    HRESULT _stdcall Status([in] VARIANT Value);
    [propget, id(0x000000DF)]
    HRESULT _stdcall PicoConfig([out, retval] long* Value);
    [propput, id(0x000000DF)]
    HRESULT _stdcall PicoConfig([in] long Value);
    [propget, id(0x000000E0)]
    HRESULT _stdcall PicoEnableCFast([out, retval] long* Value);
    [propput, id(0x000000E0)]
    HRESULT _stdcall PicoEnableCFast([in] long Value);
    [propget, id(0x000000E1)]
    HRESULT _stdcall PicoEnableCSlow([out, retval] long* Value);
    [propput, id(0x000000E1)]
    HRESULT _stdcall PicoEnableCSlow([in] long Value);
    [propget, id(0x000000E2)]
    HRESULT _stdcall PicoEnableJP([out, retval] long* Value);
    [propput, id(0x000000E2)]
    HRESULT _stdcall PicoEnableJP([in] long Value);
    [propget, id(0x000000E3)]
    HRESULT _stdcall PicoFilter([out, retval] long* Value);
    [propput, id(0x000000E3)]
    HRESULT _stdcall PicoFilter([in] long Value);
    [propget, id(0x000000E4)]
    HRESULT _stdcall PicoGain([out, retval] long* Value);
    [propput, id(0x000000E4)]
    HRESULT _stdcall PicoGain([in] long Value);
    [propget, id(0x000000E5)]
    HRESULT _stdcall PicoInput([out, retval] long* Value);
    [propput, id(0x000000E5)]
    HRESULT _stdcall PicoInput([in] long Value);
    [id(0x000000E6)]
    HRESULT _stdcall PicoAutoCompCFast(void);
    [id(0x000000E7)]
    HRESULT _stdcall PicoAutoCompCSlow(void);
    [id(0x000000E8)]
    HRESULT _stdcall PicoAutoCompJP(void);
    [propget, id(0x000000E9)]
    HRESULT _stdcall PicoCFastComp([out, retval] VARIANT* Value);
    [propput, id(0x000000E9)]
    HRESULT _stdcall PicoCFastComp([in] VARIANT Value);
    [propget, id(0x000000EA)]
    HRESULT _stdcall PicoCSlowComp([out, retval] VARIANT* Value);
    [propput, id(0x000000EA)]
    HRESULT _stdcall PicoCSlowComp([in] VARIANT Value);
    [propget, id(0x000000EB)]
    HRESULT _stdcall PicoJPComp([out, retval] VARIANT* Value);
    [propput, id(0x000000EB)]
    HRESULT _stdcall PicoJPComp([in] VARIANT Value);
    [id(0x000000EC)]
    HRESULT _stdcall PicoClearCompC(void);
    [id(0x000000ED)]
    HRESULT _stdcall PicoClearCompJP(void);
    [propget, id(0x000000EE)]
    HRESULT _stdcall SealTestNumAverages([out, retval] VARIANT* Value);
    [propput, id(0x000000EE)]
    HRESULT _stdcall SealTestNumAverages([in] VARIANT Value);
    [propget, id(0x000000EF)]
    HRESULT _stdcall SealTestGaFromPeak([out, retval] long* Value);
    [propput, id(0x000000EF)]
    HRESULT _stdcall SealTestGaFromPeak([in] long Value);
  };

  [
    uuid(D38DAF47-A6EC-4A66-8719-F0DB49A85CA3),
    version(1.0),
    helpstring("AUTO Object")
  ]
  coclass AUTO
  {
    [default] interface IAUTO;
  };

};
